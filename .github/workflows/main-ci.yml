name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18.x"
  RUST_VERSION: "1.75.0"

jobs:
  # Frontend CI
  frontend:
    uses: ./.github/workflows/frontend-ci.yml
    secrets: inherit

  # Backend CI
  backend:
    uses: ./.github/workflows/backend-ci.yml
    secrets: inherit

  # Contracts CI
  contracts:
    uses: ./.github/workflows/contracts-ci.yml
    secrets: inherit

  # Services CI
  services:
    uses: ./.github/workflows/services-ci.yml
    secrets: inherit

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend, backend, contracts, services]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../services/freelance-matching && npm ci

      - name: Start services
        run: |
          # Start backend
          cd backend
          npm run build
          npm start &
          BACKEND_PID=$!
          
          # Start frontend
          cd ..
          npm run build
          npm start &
          FRONTEND_PID=$!
          
          # Wait for services to be ready
          sleep 30
          
          # Run integration tests
          npm run test:integration
          
          # Cleanup
          kill $BACKEND_PID $FRONTEND_PID

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 7

  # Deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend, backend, contracts, services, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your deployment logic here
          
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment logic here

  # Notify on success
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ All CI/CD pipelines completed successfully!"
          echo "üöÄ Application deployed successfully!"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå CI/CD pipeline failed!"
          echo "Please check the logs for details."
